/**
 * Copyright (c) 2022, Xerra Earth Observation Institute.
 * Copyright (c) 2025, Simeon Miteff.
 *
 * See LICENSE.TXT in the root directory of this source tree.
 */

// Code generated by go-tcpinfo/cmd/prom-metrics-gen. DO NOT EDIT.

package exporter

import (
	"fmt"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/simeonmiteff/go-tcpinfo/pkg/linux"
)

{{- range .Metrics}}

func (t *TCPInfoCollector) add_{{.Name}}_metric(prefix string, connectionLabels []string, constLabels prometheus.Labels) info {
	return info{
		description: prometheus.NewDesc(
			fmt.Sprintf("%s_{{.Name}}", prefix),
			"{{.Help}}",
			connectionLabels,
			constLabels,
		),
		supplier: func(tcpInfo *linux.TCPInfo, labelValues []string) prometheus.Metric {
			{{- if .IsNullable}}
			if !tcpInfo.{{.FieldName}}.Valid {
				return nil
			}
			{{- end}}
			return prometheus.MustNewConstMetric(
				prometheus.NewDesc(
					fmt.Sprintf("%s_{{.Name}}", prefix),
					"{{.Help}}",
					connectionLabels,
					constLabels,
				),
				prometheus.{{.Type}}Value,
				{{- if .IsBool}}
				boolToFloat64(tcpInfo.{{.FieldName}}.Value),
				{{- else if .IsNullable}}
				float64(tcpInfo.{{.FieldName}}.Value),
				{{- else}}
				float64(tcpInfo.{{.FieldName}}),
				{{- end}}
				labelValues...,
			)
		},
	}
}
{{- end}}

func (t *TCPInfoCollector) addMetrics(
	prefix string,
	connectionLabels []string,
	constLabels prometheus.Labels,
) {
	infos := []info{
{{- range .Metrics}}
		t.add_{{.Name}}_metric(prefix, connectionLabels, constLabels),
{{- end}}
	}

	// Filter out metrics that might not be supported by the kernel
	for _, i := range infos {
		if i.supplier != nil {
			t.infos = append(t.infos, i)
		}
	}
}

func boolToFloat64(b bool) float64 {
	if b {
		return 1
	}
	return 0
}
